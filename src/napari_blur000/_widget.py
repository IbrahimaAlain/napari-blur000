"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/building_a_plugin/guides.html#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/
"""

from typing import TYPE_CHECKING
import numpy as np
from scipy.ndimage import gaussian_filter
from magicgui.widgets import Container, create_widget, CheckBox, Slider

if TYPE_CHECKING:
    import napari


class ImageBlurWidget(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer

        self.image_layer_combo = create_widget(
            label="Image", annotation="napari.layers.Image"
        )
        self.apply_blur_checkbox = CheckBox(text="Appliquer le flou")
        self.sigma_slider = Slider(min=0.1, max=10.0, step=0.1)
        self.sigma_slider.value = 2.0

        self.image_layer_combo.changed.connect(self._update_image)
        self.apply_blur_checkbox.changed.connect(self._update_image)
        self.sigma_slider.changed.connect(self._update_image)

        self.extend([
            self.image_layer_combo,
            self.apply_blur_checkbox,
            self.sigma_slider,
        ])

    def _update_image(self):
        img_layer = self.image_layer_combo.value
        if img_layer is None:
            return

        img = np.array(img_layer.data)

        if self.apply_blur_checkbox.value:
            sigma = self.sigma_slider.value
            #img = gaussian_filter(img, sigma=sigma)
            img = img / 2

        name = img_layer.name + "_flou"
        if name in self.viewer.layers:
            self.viewer.layers[name].data = img
        else:
            self.viewer.add_image(img, name=name)
